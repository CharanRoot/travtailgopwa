{"version":3,"sources":["assets/Travtail.png","components/OTPNumberInput.tsx","aws-exports.js","pages/OTPAuth.tsx","pages/Checkout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TextMaskCustom","props","inputRef","other","ref","inputElement","mask","placeholderChar","showMask","OTPNumberInput","FormControl","InputLabel","htmlFor","Input","autoFocus","error","inputError","value","numberText","onChange","e","setNumberText","target","name","id","inputComponent","startAdornment","InputAdornment","position","awsmobile","Amplify","configure","awsconfig","OTPAuth","React","useState","msgSent","setMsgSent","code","setCode","coolDown","setCoolDown","phoneError","setPhoneError","session","setSession","password","Math","random","toString","history","useHistory","getPhoneNumber","replace","signIn","a","length","Auth","result","signUp","console","log","username","attributes","phone_number","verifyOtp","sendCustomChallengeAnswer","user","setUser","push","onSendButtonClick","useEffect","setTimeout","verificationInput","TextField","label","size","event","Button","variant","style","margin","disabled","onClick","src","logo","className","alt","stripePromise","loadStripe","Checkout","message","setMessage","query","URLSearchParams","window","location","search","get","handleCheckout","myInit","response","body","headers","API","post","stripe","redirectToCheckout","sessionId","data","App","setState","PrivateRoute","Component","component","rest","state","render","Object","keys","to","basename","process","exact","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f01b4d69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Travtail.d50df39a.png\";","import React from 'react';\nimport MaskedInput from 'react-text-mask';\nimport { Input, InputLabel, InputAdornment, FormControl } from '@material-ui/core';\n\n\ninterface TextMaskCustomProps {\n  inputRef: (ref: HTMLInputElement | null) => void;\n}\n\n// coustom mask\nconst TextMaskCustom = (props: TextMaskCustomProps) => {\n  const { inputRef, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref: any) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      mask={['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n      placeholderChar={'\\u2000'}\n      showMask\n    />\n  );\n}\n\ninterface OTPNumberInputProps {\n  // pass down from OTPAuth page\n  numberText: string;\n  inputError: boolean;\n  setNumberText: (phoneNumber: string) => void;\n}\n\nconst OTPNumberInput: React.FC<OTPNumberInputProps> = (props) => {\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.setNumberText(e.target.value);\n  }\n\n  return (\n    <>\n      <FormControl>\n        <InputLabel htmlFor=\"phone-number\">Phone Number</InputLabel>\n        <Input\n          autoFocus\n          error={props.inputError}\n          value={props.numberText}\n          onChange={handleChange}\n          name=\"textmask\"\n          id=\"phone-number-mask-input\"\n          inputComponent={TextMaskCustom as any}\n          startAdornment={<InputAdornment position=\"start\">+1</InputAdornment>}\n        />\n      </FormControl>\n    </>\n  );\n}\n\nexport default OTPNumberInput;","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:39c1b6b3-8451-44c8-8ff4-36a925c09b32\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_b81z2jnAQ\",\n    \"aws_user_pools_web_client_id\": \"65c53478dqfertlmbtdrtq9399\",\n    \"oauth\": {},\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"stripeIntegration\",\n            \"endpoint\": \"https://ve0xisbmb1.execute-api.us-east-1.amazonaws.com/dev\",\n            \"region\": \"us-east-1\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, TextField } from '@material-ui/core';\n\nimport OTPNumberInput from '../components/OTPNumberInput';\nimport logo from '../assets/Travtail.png';\n\nimport Amplify from '@aws-amplify/core';\nimport Auth from '@aws-amplify/auth';\nimport awsconfig from '../aws-exports';\nAmplify.configure(awsconfig);\n\n\ninterface OTPAuthProps {\n  setUser: (user: object) => void;\n}\n\nconst OTPAuth: React.FC<OTPAuthProps> = props => {\n  // indcate whether user click verify button\n  const [msgSent, setMsgSent] = React.useState<boolean>(false);\n  // phone number\n  const [numberText, setNumberText] = React.useState<string>('');\n  // verification code\n  const [code, setCode] = React.useState<string>('');\n  // cooldown timer for resent\n  const [coolDown, setCoolDown] = React.useState<number>(0);\n  // check phone input error\n  const [phoneError, setPhoneError] = React.useState<boolean>(false);\n  // user session\n  const [session, setSession] = React.useState(null);\n  // auto generate password\n  const password = Math.random().toString(10) + 'Abc#';\n\n  // react router\n  const history =  useHistory();\n\n  // get the phone number from numberText states\n  const getPhoneNumber = () => {\n    return '+1' + numberText.replace(/\\s|\\(|\\)|-/g, '');\n  }\n\n\n  const signIn = async () => {\n    // check phone number\n    if (getPhoneNumber().length === 12) {\n      setPhoneError(false);\n      try {\n        const result = await Auth.signIn(getPhoneNumber());\n        if (result) {\n          setSession(result);\n        }\n      } catch (error) {\n        if (error.code === 'UserNotFoundException') {\n          signUp();\n        } else {\n          console.log(error.code);\n          console.log('error signing in:', error);\n        }\n      }\n    } else {\n      setPhoneError(true);\n    }\n  };\n\n  const signUp = async () => {\n    console.log('new sign up');\n    try {\n      await Auth.signUp({\n        username: getPhoneNumber(),\n        password,\n        attributes: {\n          phone_number: getPhoneNumber(),\n        },\n      });\n\n    } catch (error) {\n      console.log('error signing up:', error);\n    }\n  };\n\n  const verifyOtp = async () => {\n    try {\n      const user = await Auth.sendCustomChallengeAnswer(session, code);\n      if (user) {\n        props.setUser(user);\n        setSession(null);\n        console.log('verify success');\n        // push to check out page(temp, change when integrate with store)\n        history.push('/checkout');\n      }\n    } catch (error) {\n      await signIn();\n      setCode('');\n      console.log(error);\n    }\n  };\n\n  // handler for send message button\n  const onSendButtonClick = async () => {\n    setMsgSent(true);\n\n    // set up coolDown time\n    setCoolDown(10);\n    await signIn();\n\n  }\n\n  // get verification code input\n  const onCodeInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCode(event.target.value);\n  }\n\n  // set up cutdown, update cooldown time\n  React.useEffect(() => {\n    coolDown > 0 && setTimeout(() => setCoolDown(coolDown - 1), 1500);\n  }, [coolDown]);\n\n\n  // the verification code textinput, only display when send is click\n  const verificationInput = msgSent ? (\n    <>\n      <TextField id=\"verification-code\" label=\"Input code\" size=\"small\" onChange={onCodeInputChange} />\n      <Button\n        variant=\"contained\"\n        style={{ margin: \"10px\" }}\n        disabled={code ? false : true}\n        onClick={verifyOtp}\n      >Verify</Button>\n    </>\n  ) : null;\n\n  return (\n    <div>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <div>\n        <p>Welcome, please verify your phone</p>\n      </div>\n      <div>\n        <OTPNumberInput numberText={numberText} setNumberText={setNumberText} inputError={phoneError} />\n        <Button\n          onClick={onSendButtonClick}\n          variant=\"contained\"\n          style={{ margin: \"10px\" }}\n          disabled={coolDown === 0 ? false : true}\n        >\n          {msgSent ? `Resend${coolDown ? `(${coolDown})` : ''}` : 'Send'}\n        </Button>\n      </div>\n      <div>\n        {verificationInput}\n      </div>\n      <div>\n      </div>\n    </div>\n  );\n}\n\nexport default OTPAuth;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nimport { API } from 'aws-amplify';\n\n// Make sure to call `loadStripe` outside of a component’s render\nconst stripePromise = loadStripe(\"pk_test_Wks4vayZlORiZoodc5IA0RhA00RaDpuklR\");\n\n\n\nconst Checkout: React.FC = () => {\n  // react router\n  const history = useHistory();\n  // get checkout result\n  const [message, setMessage] = React.useState<string>(\"\");\n  // setup message if this is a redirect back from checkout\n  React.useEffect(() => {\n    // Check to see if this is a redirect back from Checkout\n    const query = new URLSearchParams(window.location.search);\n    if (query.get(\"success\")) {\n      setMessage(\"Order placed! You will receive an email confirmation.\");\n    }\n    if (query.get(\"canceled\")) {\n      setMessage(\n        \"Order canceled -- continue to shop around and checkout when you're ready.\"\n      );\n    }\n  }, []);\n\n\n\n  // handle checkout\n  const handleCheckout = async () => {\n    let myInit = {\n      response: true,\n      body: {\n      },\n      headers: {} // OPTIONAL\n    }\n\n    try {\n      const response = await API.post(\"stripeIntegration\", \"/stripe\", myInit);\n      console.log(\"setupIntents\", response);\n\n      const stripe = await stripePromise;\n      //const session = await response.json();\n      // When the customer clicks on the button, redirect them to Checkout.\n      const result = await stripe?.redirectToCheckout({\n        sessionId: response.data.id,\n      });\n      if (result?.error) {\n        // If `redirectToCheckout` fails due to a browser or network\n        // error, display the localized error message to your customer\n        // using `result.error.message`.\n      }\n    } catch (e) {\n      console.log(\"error\", e);\n    }\n\n  };\n\n\n\n  return message ? (\n    <div>\n      <p>{message}</p>\n      <button onClick={() => { history.push('/') }}>return</button>\n    </div>\n  ) :\n    (\n      <div>\n        <div>\n          <button onClick={handleCheckout}>Checkout</button>\n        </div>\n      </div>\n    );\n}\n\nexport default Checkout;","import React from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport OTPAuth from './pages/OTPAuth';\nimport Checkout from './pages/Checkout';\n\nimport './App.css';\n\nclass App extends React.Component<{}, { user: object }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      user: {}\n    }\n  }\n\n  setUser = (user: object) => {\n    this.setState({ user });\n  }\n      //@ts-ignore\n   PrivateRoute = ({ component: Component, ...rest }) => {\n    console.log(\"Object.keys(object1)\",this.state.user);\n\n    return (<Route {...rest} render={(props) => (\n      Object.keys(this.state.user).length >0\n        ? <Component {...props} />\n        : <Redirect to='/' />\n    )} />\n    )};\n\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n         <div className=\"App\">\n          <header className=\"App-header\">\n      <Switch>  \n         <Route exact path='/'  render={() => <OTPAuth setUser={this.setUser}/>} />\n     \n        <this.PrivateRoute path='/checkout' component={Checkout} />\n        \n      </Switch>\n        </header>\n       </div>\n      </BrowserRouter>\n\n    )\n    // return (\n    //   <Router>\n    //     <div className=\"App\">\n    //       <header className=\"App-header\">\n    //         <Switch>\n    //           <Route path=\"/checkout\" render={() => <Checkout/>} />\n    //           <Route path=\"/\" exact render={() => <OTPAuth setUser={this.setUser}/>} />\n    //         </Switch>\n    //       </header>\n    //     </div>\n    //   </Router>\n\n    // );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}